buildscript {
    repositories {
        mavenCentral()
        maven { url 'https://maven.fabric.io/public' }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:2.2.3'
        classpath 'org.greenrobot:greendao-gradle-plugin:3.2.1'//Needed by greeenDao
        classpath 'io.fabric.tools:gradle:1.+'
    }
}
////////////////////////////////////////////////////////////////////////////////////////////////////
apply plugin: 'com.android.application'
apply plugin: 'io.fabric'

repositories {
    maven { url 'https://maven.fabric.io/public' }
}

apply plugin: 'org.greenrobot.greendao'
////////////////////////////////////////////////////////////////////////////////////////////////////
android {
    compileSdkVersion 25
    buildToolsVersion "25.0.2"

    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 25
        applicationId "com.kassisdion.nestedworld"
        versionCode 1
        versionName "1.0"
        resConfigs ("en", "fr")
        multiDexEnabled true
        vectorDrawables.useSupportLibrary = true
        renderscriptSupportModeEnabled true
    }
    productFlavors {
        dev {
            // dev utilizes minSDKVersion = 21 to allow the Android gradle plugin
            // to pre-dex each module and produce an APK that can be tested on
            // Android Lollipop without time consuming dex merging processes.
            minSdkVersion 21
        }
        prod {
            minSdkVersion 16
        }
    }
    signingConfigs {
        release {

        }
        debug {

        }
    }
    dexOptions {
        javaMaxHeapSize "4g"
    }
    buildTypes {
        release {
            buildConfigField "com.nestedworld.nestedworld.data.network.NetworkConstant.Environement", "ENVIRONMENT", "com.nestedworld.nestedworld.data.network.NetworkConstant.Environement.PROD"
            resValue "string", "app_name", "Nestedworld"
            buildConfigField "Boolean", "LOG", 'false'
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
        debug {//Same as dev (without app_name and environment)
            buildConfigField "Boolean", "LOG", 'true'
            versionNameSuffix "-SNAPSHOT"
            signingConfig signingConfigs.debug
        }
        with_back_dev {
            initWith debug // inherit from debug (attribute and signing configurations).
            buildConfigField "com.nestedworld.nestedworld.data.network.NetworkConstant.Environement", "ENVIRONMENT", "com.nestedworld.nestedworld.data.network.NetworkConstant.Environement.DEV"
            resValue "string", "app_name", "Nestedworld Dev"
        }
        with_back_prod {
            initWith debug // inherit from debug (attribute and signing configurations).
            buildConfigField "ccom.nestedworld.nestedworld.data.network.NetworkConstant.Environement", "ENVIRONMENT", "com.nestedworld.nestedworld.data.network.NetworkConstant.Environement.PROD"
            resValue "string", "app_name", "Nestedworld Prod"
        }
    }
    //Special rules for allowing only some buildType/flavor pair
    //Loop over variants
   variantFilter { variant ->
       //Loop over flavor
        variant.getFlavors().each { flavor ->
            //If we build a build dev flavor, we just want to ignore the "default" buildType
            if (flavor.name.equals('dev')) {
                //If it's a "default" buildtype, ignore it
                if (variant.buildType.name.equals('debug') || variant.buildType.name.equals('release')) {
                    variant.setIgnore(true)
                }
            }
            //If we build a build prod flavor, we only a back_prod buildType
            else if (flavor.name.equals('prod')) {
                //If it's not a back_prod buildType, ignore it
                if (!variant.buildType.name.equals('with_back_prod')) {
                    variant.setIgnore(true)
                }
            }
        }
    }
}
////////////////////////////////////////////////////////////////////////////////////////////////////
greendao {
    schemaVersion 2
}
////////////////////////////////////////////////////////////////////////////////////////////////////
ext {
    supportLibVersion = '25.1.0'
    retrofitVersion = '2.1.0'
    okHttpVersion = '3.4.1'
    butterknifeVersion = '8.4.0'
    awsVersion = '2.2.22'
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    testCompile 'junit:junit:4.12'

    //GPS
    compile 'com.google.android.gms:play-services-maps:10.0.1'

    //Annotation replacing findViewById()
    compile "com.jakewharton:butterknife:${butterknifeVersion}"
    annotationProcessor "com.jakewharton:butterknife-compiler:${butterknifeVersion}"

    //Support library
    compile "com.android.support:appcompat-v7:${supportLibVersion}"
    compile "com.android.support:design:${supportLibVersion}"
    compile "com.android.support:recyclerview-v7:${supportLibVersion}"

    //Material design support helper
    compile 'com.github.rey5137:material:1.2.4'
    compile 'com.avast:android-styled-dialogs:2.3.3'

    //Rounded image (with border)
    compile 'de.hdodenhof:circleimageview:2.1.0'

    //API
    compile "com.squareup.retrofit2:retrofit:${retrofitVersion}"//send request
    compile "com.squareup.retrofit2:converter-gson:${retrofitVersion}"//use Json converter
    compile "com.squareup.okhttp3:logging-interceptor:${okHttpVersion}"//display log
    compile "com.squareup.okhttp3:okhttp:${okHttpVersion}"

    //ORM
    compile 'org.greenrobot:greendao:3.2.0'

    //MessagePack (real time API)
    compile 'org.msgpack:msgpack-core:0.8.11'

    //Customize typeface
    compile 'uk.co.chrisjenx:calligraphy:2.2.0'

    //Image management
    compile 'com.github.bumptech.glide:glide:3.7.0'
    compile 'jp.wasabeef:glide-transformations:1.3.1'//rounded image

    //Public / Subsbrice to event
    compile 'org.greenrobot:eventbus:3.0.0'

    //multi dex
    compile 'com.android.support:multidex:1.0.1'

    //Pie chart
    compile 'com.github.PhilJay:MPAndroidChart:v3.0.1'

    //AWS
    compile "com.amazonaws:aws-android-sdk-core:${awsVersion}"
    compile "com.amazonaws:aws-android-sdk-s3:${awsVersion}"
    compile "com.amazonaws:aws-android-sdk-ddb:${awsVersion}"
    compile('com.crashlytics.sdk.android:crashlytics:2.6.5@aar') {
        transitive = true;
    }
}